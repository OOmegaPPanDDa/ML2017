data$per_stop <- data$n_stop/data$n_word
# 取得 情感分數
# Add sentiment score
data$senti_score <- senti(data)
# 取得 tfidf 文本相似度
# Add tf_idf_score for similarity
ans_tfidf <- by(data, data$question_title, tf_idf_score)
data$ans_tfidf <- unlist(ans_tfidf)
# 取得 文本分群 feature
# 有兩種分群一個是直接的 kmeans, 一個是 pca 降階後再 kmeans
# 取出來的 feature 可以把它想成該回答與各族群的接近度
# Add cluster score
ans_cluster <- by(data, data$question_title, get_cluster_feature)
shiny::runApp('dsR/dsr_zhihu/shiny_dsr_zhihu')
runApp('dsR/dsr_zhihu/shiny_dsr_zhihu')
library(readr)
train <- read_csv("~/Desktop/pecuD3_final/train.csv")
View(train)
unique(train$STOP_NAME)
stop_name<-unique(train$STOP_NAME)
paste(stop_name,'火車站', collapse = '')
paste0(stop_name,'火車站', collapse = '')
stop_df <- data.frame(stop_name = stop_name)
stop_df
stop_df <- stop_df %>% mutate(paste(stop_name,'火車站',collapse=''))
library(dplyr)
stop_df <- stop_df %>% mutate(paste(stop_name,'火車站',collapse=''))
stop_df
View(stop_df)
stop_df <- stop_df %>% mutate(stop_t_name = paste(stop_name,'火車站',collapse=''))
stop_df = stop_df[c(,1)]
stop_df = stop_df[c(1),]
stop_name
stop_df <- data.frame(stop_name = stop_name)
colnames(stop_df)
colnames(stop_df) <- '1'
stop_df <- stop_df %>% mutate(2 = paste(1,'火車站',collapse=''))
stop_df <- stop_df %>% mutate('2' = paste('1','火車站',collapse=''))
colnames(stop_df) = one
colnames(stop_df) = 'one'
stop_df <- stop_df %>% mutate(two = paste(one,'火車站',collapse=''))
stop_df <- stop_df %>% mutate(two = paste(stop_df$one,'火車站',collapse=''))
stop_name
for(name in stop_name){}
stop_name
stop_df <- data.frame(stop_name = stop_name)
for(i in 1:nrow(stop_df)){
stop_df$stop_name[i] = paste(stop_df$stop_name[i],' 火車站',collapse = '')
}
View(stop_df)
stop_df <- data.frame(stop_name = stop_name)
stop_df <- data.frame(sname = stop_name)
for(i in 1:nrow(stop_df)){
stop_df[i,sname] = paste(stop_df[i,sname],' 火車站',collapse = '')
}
for(i in 1:nrow(stop_df)){
stop_df[i,'sname'] = paste(stop_df[i,'sname'],' 火車站',collapse = '')
}
stop_name
to_add<-rep('火車站',length(stop_name))
to_add
paste(stop_name,to_add,collapse = '')
paste0(stop_name,to_add,collapse = '')
paste0(stop_name,to_add)
stop_name<-paste0(stop_name,to_add)
stop_name
write(stop_name,'stop_name.txt')
install.packages(library(googleVis))
install.packages('googleVis')
library(googleVis)
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line <- gvisLineChart(df)
plot(Line)
Line
Bar <- gvisBarChart(df)
plot(Bar)
print(Bar, file="~/Desktop/AndrewGeoMap.js")
print(Bar, "char",file="~/Desktop/AndrewGeoMap.js")
print(Bar, "chart", file="~/Desktop/AndrewGeoMap.js")
source('~/.active-rstudio-document')
demo(googleVis)
require(datasets)
states
View(state.x77)
View(state.name)
state.name
library(ggmap) library(mapproj)
原文網址：https://read01.com/7Rdan.html
install.packages(ggmap)
install.packages('ggmap;)
install.packages('ggmap;)
;d
ssdsd(0)
install.packages('ggmap')
library(ggmpa)
library(ggmpap)
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 4)
ggmap(map)
library(mapproj)
ggmap(map)
install.packages('ggptoto')
install.packages('ggproto')
install.packages('ggmap')
install.packages("ggmap")
ggmap(map)
library(mapproj)
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 4)
ggmap(map)
map <- get_map(location = 'China', zoom = 4)
ggmap(map)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
library(readr)
train_flow <- read_csv("~/D3/pecuD3_final/train_flow.csv")
View(train_flow)
library(dplyr)
train_simple <- subset(train,year==2005)
train_simple <- subset(train_flow,year==2005)
library(ggmap)
map <- get_map(location = "Taiwan", zoom = 8, language = "zh-TW", maptype = "roadmap")
ggmap(map, darken = c(0.5, "white")) +geom_point(aes(x = long, y = lat),
color = "red", data = train_simple)
is.na(train_simple)
sum(is.na(train_flow))
sum(is.nan(train_flow))
sum(is.na(train_flow))
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(low = "green", high = "red",guide = FALSE)+scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(low = "green", high = "red",guide = FALSE)+scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(low = "green", high = "red",guide = FALSE)+scale_alpha(range = c(0, 0.3), guide = 'legend')
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(low = "green", high = "red",guide = 'legend')+scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(low = "#132B43", high = "#56B1F7", space = "Lab", na.value = "grey50",
guide = "legend")+scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(,data=train_simple,low = "#132B43", high = "#56B1F7", space = "Lab", na.value = "grey50",
guide = "legend")+scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(data=train_simple,low = "#132B43", high = "#56B1F7", space = "Lab", na.value = "grey50",
guide = "legend")+scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..))
ggmap(map) +
geom_point(aes(x = lon, y = lat), size = 2, col="red",data = train_simple, alpha = 0.6) +
geom_density2d(data = train_simple, aes(x = lon, y=lat), size = 0.3)
ggmap(map) +
geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 0.6) +
geom_density2d(data = train_simple, aes(x = long, y=lat), size = 0.3)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)+
stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")+
scale_fill_gradient(low = "green", high = "red",guide = 'legend')+
scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)+
stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")+
scale_fill_gradient(low = "green", high = "red",guide = 'legend')+
scale_alpha(range = c(0, 0.3), guide = F)
train_simple <- subset(train_flow, year==2014)
View(train_simple)
train_simple %>% group_by(stop_name) %>% mutate(yearFLow = sum(flow))
train_simple %>% group(stop_name) %>% mutate(yearFLow = sum(flow))
train_simple %>% group_by(stop_name) %>% mutate(yearFLow = sum(flow)) %>% ungroup()
train_use <- train[,c('stop_name','yearFlow','lat','long')]
train_use <- train_simple[,c('stop_name','yearFlow','lat','long')]
train_use <- train_simple %>% group_by(stop_name) %>% mutate(yearFLow = sum(flow)) %>% ungroup()[,c('stop_name','yearFlow','lat','long')]
train_use <- train_simple %>% group_by(stop_name) %>% mutate(yearFLow = sum(flow)) %>% ungroup()
train_use <- train_use[,c('stop_name','yearFlow','lat','long')]
View(train_use)
train_use <- train_use[,c('stop_name','yearFLow','lat','long')]
colnames(train_use)[2] = 'yearFlow'
train_use <- unique(train_use)
train_use <- train_use %>% arrange(desc(yearFlow))
View(train_use)
ggmap(map)+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_use, alpha = 1)+
stat_density2d(data = train_use, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")+
scale_fill_gradient(low = "green", high = "red",guide = 'legend')+
scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_use, alpha = 1)
write.csv(train_use,'2014_train_year_flow.csv',row.names = F)
View(train_simple)
View(train_use)
shiny::runApp('D3/pecuD3_final/pecuD3_shiny_final')
runApp('D3/pecuD3_final/pecuD3_shiny_final')
shiny::runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
install.packages('extrafont')
library(extrafont)
runApp('pecuR/shinyProject')
fonts()
fonttable()
library(extrafont)
fonttable()
fonttable()
fonts()
font_import()
font_import()
fonts()
fonttable()
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
shiny::runApp('dsR/dsr_zhihu/shiny_dsr_zhihu')
shiny::runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
shiny::runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
shiny::runApp('dsR/dsr_zhihu/shiny_dsr_zhihu')
shiny::runApp('pecuR/shinyProject_personal')
print(a)
source('~/Desktop/test.R')
source('~/ML2017/hw2/hw2.R')
Inspect(xmat)
inspect(xmat)
View(xmat[1:4,1:4])
View(xmat[1:4][1:4])
View(xmat[1:4])
View(xmat[1:4,])
View(xmat[1:4,1])
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
View(xmat)
source('~/ML2017/hw2/hw2.R')
View(xmat)
source('~/ML2017/hw2/hw2.R')
View(xmat)
source('~/ML2017/hw2/hw2.R')
View(xmat)
source('~/ML2017/hw2/hw2.R')
View(y)
source('~/ML2017/hw2/hw2.R')
t(xmat) %*% xmat
solve(t(xmat) %*% xmat)
as.matrix(t(xmat) %*% xmat)
bhead = solve(t(xmat)%*%xmat, t(xmat)%*%y)
source('~/ML2017/hw2/hw2.R')
bhead = solve(t(xmat) %*% xmat) %*% t(xmat) %*% y
t(xmat) %*% xmat
View(t(xmat) %*% xmat)
View(solve(t(xmat) %*% xmat))
colSum(the_train)
colSums(the_train)
colSums(the_train)>0
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
View(the_train)
colSums(the_train)
colnames(the_train)
View(xmat)
View(t(xmat) %*% xmat)
solve(t(xmat) %*% xmat)
source('~/ML2017/hw2/hw2.R')
View(t(xmat) %*% xmat)
source('~/ML2017/hw2/hw2.R')
View(xmat)
xmat[,==0]
xmat[,xmat==0]
xmat==0
xmat[xmat==0] = 1e-8
View(xmat)
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
View(xmat)
View(t(xmat) %*% xmat)
names(xmat)[20]
colnames(xmat)[20]
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
View(xmat)
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
View(the_train)
source('~/ML2017/hw2/hw2.R')
Y_train_[1:5]
Y_train[1:5]
Y_train[,1:5]
Y_train
source('~/ML2017/hw2/hw2.R')
Y_train[1:5,]
X_train
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
View(the_train)
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
View(xmat)
source('~/ML2017/hw2/hw2.R')
View(xmat)
t(xmat) %*% xmat
scale(c(1,2,3))
scale(the_train)
View(scale(the_train))
colSum(the_train)
colSums(the_train)
colSums(scale(the_train))
colSums(scale(the_train)) > 0
colSums(scale(the_train)) != 0
colSums(scale(the_train)) != NA
colSums(scale(the_train)) != NaN
colSums(scale(the_train)) > 0
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
View(the_train)
source('~/ML2017/hw2/hw2.R')
View(the_train)
source('~/ML2017/hw2/hw2.R')
bhead
View(X_test)
View(X_mat)
View(xmat)
xmat %*% bhead
source('~/ML2017/hw2/hw2.R')
res
source('~/ML2017/hw2/hw2.R')
acc
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
res1
res2
res2
res1
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
res1
res2
source('~/ML2017/hw2/hw2.R')
res2
?scale
colMax(X_train)
colMaxs(X_train)
colmax(X_train)
colMean(X_train)
colMeans(X_train)
colSd <- function (x, na.rm=FALSE) apply(X=x, MARGIN=2, FUN=sd, na.rm=na.rm)
colSd <- function (the_train, na.rm=FALSE) apply(X=the_train, MARGIN=2, FUN=sd, na.rm=na.rm)
colSd
apply(X=the_train, MARGIN=2, FUN=sd, na.rm=na.rm)
apply(X_train, MARGIN=2, FUN=sd)
source('~/ML2017/hw2/hw2.R')
the_train_mean
the_train_mean
matrix(the_train_mean)
?matrix
matrix(the_train_mean, ncol=ncol(X_train), nrow=nrow(X_train), byrow = TRUE)
mean_mat <- matrix(the_train_mean, ncol=ncol(X_train), nrow=nrow(X_train), byrow = TRUE)
View(mean_mat)
source('~/ML2017/hw2/hw2.R')
X_train - mean_mat
View(X_train - mean_mat)
View(X_train)
View(mean_mat)
the_train <- X_train - mean_mat
the_train <- the_train/std_mat
View(the_train)
source('~/ML2017/hw2/hw2.R')
res2
matrix(1:10,ncol=5,byrow=T)
matrix(1:5,ncol=5,byrow=T)
matrix(1:5,ncol=5,nrow=4byrow=T)
matrix(1:5,ncol=5,nrow=4,byrow=T)
res1>0
res1>1
sum(res1>1)
sum(res2>1)
source('~/ML2017/hw2/hw2.R')
res1 - res2
res1
res2
res1-res2
sum(res1-res2)/length(res)
sum((res1-res2)^2)/length(res)
res1
res2
res1[1:10]
res2[1:10]
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
View(the_test)
X_test
View(X_test)
X-test - mean_mat
X_test - mean_mat
source('~/ML2017/hw2/hw2.R')
y = matrix(the_train$label, ncol=1)
xmat = cbind(rep(1,nrow(the_train)), the_train[,1:ncol(the_train)-1])
names(xmat)[1] = 'coeff'
xmat = as.matrix(xmat)
bhead = solve(t(xmat) %*% xmat) %*% t(xmat) %*% y
train_res <- round(xmat %*% bhead)
acc <- c(y) - c(round(train_res))
acc <- acc^2
acc <- 1 - sum(acc)/length(acc)
print(acc)
mean_mat <- matrix(the_train_mean, ncol=ncol(X_train), nrow=nrow(X_test), byrow = TRUE)
std_mat <- matrix(the_train_std, ncol=ncol(X_train), nrow=nrow(X_test), byrow = TRUE)
View(mean_mat)
the_test <- X_test - mean_mat
the_test <- the_test/std_mat
test_matrix = as.matrix(cbind(rep(1,nrow(the_test)), the_test))
res <- test_matrix %*% bhead
res <- round(res)
res[res>1] = 1
res2 <- res
res_df <- data.frame(id = 1:16281, label = res)
write.csv(res_df, file='res.csv', row.names = FALSE)
res1
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
res1
res2
(res2 - res1)^2
(res2 - res1)^2/length(res1)
sum((res2 - res1)^2)/length(res1)
View(res)
View(res1)
res1
res1[1:20]
res2[1:20]
model
model$coeffieicint
model$coefficient
abs(model$coefficient)
abs(model$coefficient) > 0.5
model$coefficient[abs(model$coefficient) > 0.5]
source('~/ML2017/hw2/hw2.R')
View(X_train)
sum((res1 -res2)^2)/length(res1)
source('~/ML2017/hw2/hw2.R')
source('~/ML2017/hw2/hw2.R')
res1
res1[1:10]
res2[1:10]
source('~/ML2017/hw2/hw2.R')
res
print(sum((res -res2)^2)/length(res1))
sum((res1 -res2)^2) > 0
sum((res1 -res2)^2)
source('~/ML2017/hw2/hw2.R')
getwd()
setwd("~/ML2017/hw2")
source('~/ML2017/hw2/hw2.R')
